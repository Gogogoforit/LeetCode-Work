/*
461. Hamming Distance
The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, calculate the Hamming distance.

Note:
0 ≤ x, y < 231.

Example:

Input: x = 1, y = 4

Output: 2

Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑

The above arrows point to positions where the corresponding bits are different.

Linkage:https://leetcode.com/problems/hamming-distance/?tab=Description
*/

int hammingDistance(int x, int y) {
    int z, count;
    z = count = 0;
    z = x^y;
    while(z)
    {
        z= z&(z-1);
        count++;

    }
    
    return count;  
}


/*
总结，这题十分简单。首先要求不同位，自然而然联想异或。
另外，注意32行的“异或和n&(n-1)”技巧
对两个二进制数进行异或，得到的结果中某位为1，则对应的原来两个数中该位是不同的。
而使用n&(n-1)可以使得n的二进制数表示中最后一位1变成0。例如n=110, n-1=101, 则n&(n-1)=100。
综上，可以对两个数进行异或之后使用n&(n-1)技巧计算不同的位数。这种方法无需遍历二进制数中的所有位, 只比较不同的位。
*/
